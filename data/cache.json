[
  {
    "id": "197c354f-e725-8099-98ba-c93f14e4b471",
    "title": "Sum of Two Integers",
    "url": "https://neetcode.io/problems/sum-of-two-integers",
    "tag": "Bit Manipulation",
    "hint": "addition is simulate by & and << 1 to get carry and then a ^ b;  use mask in python only",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8012-a244-e752cd6e8213",
    "title": "Linked List Cycle",
    "url": "https://neetcode.io/problems/linked-list-cycle-detection",
    "tag": "Linked List",
    "hint": "use slow and fast pointers, if slow == fast then cycle, slow = slow.next,  fast = fast.next.next",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80a2-b71a-e3c6ee6857c2",
    "title": "Merge Two Sorted Lists",
    "url": "https://neetcode.io/problems/merge-two-sorted-linked-lists",
    "tag": "Linked List",
    "hint": "create a new list, iterate through both and then insert nodes based on values",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80cc-8d04-d0238584a769",
    "title": "Reverse Linked List",
    "url": "https://neetcode.io/problems/reverse-a-linked-list",
    "tag": "Linked List",
    "hint": "set prev & curr pointers, when swapping also need a tmp pointer",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8094-812b-d508490bea00",
    "title": "Valid Parentheses",
    "url": "https://neetcode.io/problems/validate-parentheses",
    "tag": "Stacks",
    "hint": "simple stack impementation , but remember to handle all edge cases properly",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80d9-88cf-c3300951e392",
    "title": "Best Time to Buy and Sell Stock",
    "url": "https://neetcode.io/problems/buy-and-sell-crypto",
    "tag": "Sliding Window",
    "hint": "use sliding window, diff -ve \u2192 l = r",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "10dc354f-e725-8027-a9f5-f4bb3553da3e",
    "title": "Valid Anagram",
    "url": "https://neetcode.io/problems/is-anagram",
    "tag": "Arrays & Hashing",
    "hint": "use hash set or counter or sorted()",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80c0-b943-f623b53e81dc",
    "title": "Valid Palindrome",
    "url": "https://neetcode.io/problems/is-palindrome",
    "tag": "Two Pointers",
    "hint": "use left and right pointers and then compare, use ord() or built-in isalnum() for checking alphanumeric chars",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8053-80ee-ddd638b90e92",
    "title": "Contains Duplicate",
    "url": "https://neetcode.io/problems/duplicate-integer",
    "tag": "Arrays & Hashing",
    "hint": "simple set and check it",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-808e-81fb-d7384dcfc859",
    "title": "Binary Search",
    "url": "https://neetcode.io/problems/binary-search",
    "tag": "Binary Search",
    "hint": "mid = L + (R - L) // 2",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-804d-99ce-d7711b66dde6",
    "title": "Two Sum",
    "url": "https://neetcode.io/problems/two-integer-sum",
    "tag": "Arrays & Hashing",
    "hint": "create a hashset and store nums, calc diff in every iteration and then hash[diff] to find index",
    "level": "Easy",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80a4-96ae-dc8ecaec208e",
    "title": "Subtree of Another Tree",
    "url": "https://neetcode.io/problems/subtree-of-a-binary-tree",
    "tag": "Trees",
    "hint": "use isSame helper function, recursively compare each root subtree with subroot, handle edge cases properly",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80fc-b779-efb436b517d0",
    "title": "Same Tree",
    "url": "https://neetcode.io/problems/same-binary-tree",
    "tag": "Trees",
    "hint": "use recursion; think of the base conditions properly",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8076-ba9a-f604aa574b5d",
    "title": "Balanced Binary Tree",
    "url": "https://neetcode.io/problems/balanced-binary-tree",
    "tag": "Trees",
    "hint": "similar to depth but keep track of balance also while doing dfs and return [balanced?, depth]",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80ad-8235-d2852628365c",
    "title": "Diameter of Binary Tree",
    "url": "https://neetcode.io/problems/binary-tree-diameter",
    "tag": "Trees",
    "hint": "similar to finding depth, add a dm variable and update it properly in the dfs function",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8097-bd49-e7fab7565ac7",
    "title": "Maximum Depth of Binary Tree",
    "url": "https://neetcode.io/problems/depth-of-binary-tree",
    "tag": "Trees",
    "hint": "use recursion, return 1 + max(left subtree, right subtree)",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-809d-b6c0-f0741e50b9c6",
    "title": "Invert Binary Tree",
    "url": "https://neetcode.io/problems/invert-a-binary-tree",
    "tag": "Trees",
    "hint": "use recursion, swap the root and then all its left and right subtrees",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8010-ab30-dfeccaf303b0",
    "title": "Kth Largest Element in a Stream",
    "url": "https://neetcode.io/problems/kth-largest-integer-in-a-stream",
    "tag": "Heap / Priority Queue",
    "hint": "use min heap because even if its kth largest it will be the min element in an array of size k",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80e4-886a-e2e0f8f61158",
    "title": "Min Cost Climbing Stairs",
    "url": "https://neetcode.io/problems/min-cost-climbing-stairs",
    "tag": "1-D DP",
    "hint": "dp problem , bottom up, keep in mind the range i.e -3 while solving",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80a8-9b1f-fd61b32d0aeb",
    "title": "Last Stone Weight",
    "url": "https://neetcode.io/problems/last-stone-weight",
    "tag": "Heap / Priority Queue",
    "hint": "implement maxHeap i.e (* by -1 for each elem)",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8036-811a-c41d9471b53e",
    "title": "Climbing Stairs",
    "url": "https://neetcode.io/problems/climbing-stairs",
    "tag": "1-D DP",
    "hint": "use fibonacci series with 1,1 initial values in the range(n-1)",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8044-9855-d7ee0f71b9b6",
    "title": "Meeting Rooms",
    "url": "https://neetcode.io/problems/meeting-schedule",
    "tag": "Intervals",
    "hint": "pretty much straighforward, remember to sort before comparing",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8010-bcbd-e03679b51e54",
    "title": "Plus One",
    "url": "https://neetcode.io/problems/plus-one",
    "tag": "Math & Geometry",
    "hint": "could comeup wiht the logic but problem implementing it, so review the coding part",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-809a-8331-ea82b90eed4a",
    "title": "Happy Number",
    "url": "https://neetcode.io/problems/non-cyclical-number",
    "tag": "Math & Geometry",
    "hint": "keep a set of the results already got and return false if the res repeats",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8072-b913-c2e71e7e72d4",
    "title": "Missing Number",
    "url": "https://neetcode.io/problems/missing-number",
    "tag": "Bit Manipulation",
    "hint": "X-OR  the input array with the range(n)",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-804e-9c4c-db0d0267af7a",
    "title": "Longest Common Subsequence",
    "url": "https://neetcode.io/problems/longest-common-subsequence",
    "tag": "2-D DP",
    "hint": "bottom up dp, if equal 1+ other dp , if not then max(the choices)",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80bd-ab29-cc04f0d7d6c7",
    "title": "Unique Paths",
    "url": "https://neetcode.io/problems/count-paths",
    "tag": "2-D DP",
    "hint": "bottom up dp; two choices every cell, just add them",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8073-8711-d04cb315c65a",
    "title": "Longest Increasing Subsequence",
    "url": "https://neetcode.io/problems/longest-increasing-subsequence",
    "tag": "1-D DP",
    "hint": "bottom up dp, ",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80f8-abbc-cc48c4fdb488",
    "title": "Word Break",
    "url": "https://neetcode.io/problems/word-break",
    "tag": "1-D DP",
    "hint": "bottom up DP; ",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8023-9003-cd4421fcb9c5",
    "title": "Maximum Product Subarray",
    "url": "https://neetcode.io/problems/maximum-product-subarray",
    "tag": "1-D DP",
    "hint": "use KADANES ALGORITHM",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80a3-8ce4-eca464e3cab1",
    "title": "Coin Change",
    "url": "https://neetcode.io/problems/coin-change",
    "tag": "1-D DP",
    "hint": "min among the choices i.e coins, initialize dp with max values",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8020-9895-e076d414da56",
    "title": "Decode Ways",
    "url": "https://neetcode.io/problems/decode-ways",
    "tag": "1-D DP",
    "hint": "boundary condition i.e 1 for the len(s) in dp, this will help propagate the 1",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80fa-8a50-f9cfcf8f29c0",
    "title": "Palindromic Substrings",
    "url": "https://neetcode.io/problems/palindromic-substrings",
    "tag": "1-D DP",
    "hint": "odd palindrome:  take 1 char middle and expand in both directions; even palindrome: take 2 chars as middle and expand",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-806d-b49d-decc85eaa2d7",
    "title": "Longest Palindromic Substring ",
    "url": "https://neetcode.io/problems/longest-palindromic-substring",
    "tag": "1-D DP",
    "hint": "similar to palindromic substrings; only need extra variables for max len and the res and check for each substring",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-802a-8850-eebe023621f4",
    "title": "House Robber II",
    "url": "https://neetcode.io/problems/house-robber-ii",
    "tag": "1-D DP",
    "hint": "apply house robber 1 to 2 different subarrays i.e skipping the first and last elements",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-801d-b116-d387e10ea296",
    "title": "House Robber",
    "url": "https://neetcode.io/problems/house-robber",
    "tag": "1-D DP",
    "hint": "choose to skip the current house or rob it based on the max value",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8029-b1eb-e38010a20163",
    "title": "Number of Connected Components in  an Undirected Graph",
    "url": "https://neetcode.io/problems/count-connected-components",
    "tag": "Graphs",
    "hint": "use dfs in every node and mark visited, res = no. of times you apply dfs ; can get  an optimal solution if you use the UNION FIND ALGORITHM",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8028-9af5-cced3b1fe955",
    "title": "Graph Valid Tree",
    "url": "https://neetcode.io/problems/valid-tree",
    "tag": "Graphs",
    "hint": "use dfs recursively to detect cycles, cond = no cycle and connected",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8035-8080-e47662d63e47",
    "title": "Course Schedule ",
    "url": "https://neetcode.io/problems/course-schedule",
    "tag": "Graphs",
    "hint": "use dfs ( on every course ) to detect cycle; create prereqs map ; can also be done using Kahn\u2019s Algorithm",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8002-aff0-c6fcd5731dd5",
    "title": "Pacific Atlantic Water Flow",
    "url": "https://neetcode.io/problems/pacific-atlantic-water-flow",
    "tag": "Graphs",
    "hint": "use dfs but on reverse direction i.e from ocean to cell; run dfs recursively for ease",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80c3-8827-ee7eea5684d3",
    "title": "Clone Graph",
    "url": "https://neetcode.io/problems/clone-graph",
    "tag": "Graphs",
    "hint": "use a hash set of oldtoNew and bfs",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80e4-a5b4-dd0fa2042073",
    "title": "Number of Islands",
    "url": "https://neetcode.io/problems/count-number-of-islands",
    "tag": "Graphs",
    "hint": "use BFS to search for neighbor lands to find island, in place marking for visited",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8066-b169-caccb3b59a37",
    "title": "Jump Game II",
    "url": "https://neetcode.io/problems/jump-game-ii",
    "tag": "Greedy",
    "hint": "use greedy bfs; ",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8095-9898-fd9cd170cd19",
    "title": "Jump Game",
    "url": "https://neetcode.io/problems/jump-game",
    "tag": "Greedy",
    "hint": "work backwards and shift the goal from the last index towards the first index if we can atleast jump upto it",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-809c-be4d-f209d42dc0fb",
    "title": "Maxximum Subarray",
    "url": "https://neetcode.io/problems/maximum-subarray",
    "tag": "Greedy",
    "hint": "discard negative elements i.e start fresh and grow sum if positive",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8023-beee-e7714dfb0ec9",
    "title": "Meeting Rooms II",
    "url": "https://neetcode.io/problems/meeting-schedule-ii",
    "tag": "Intervals",
    "hint": "2 pointers approach, separate start and end arrays, track the num of ongoing meetings",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80f1-81c0-e6dbe2aae570",
    "title": "Non Overlapping Intervals",
    "url": "https://neetcode.io/problems/non-overlapping-intervals",
    "tag": "Intervals",
    "hint": "sort based on start, compare adj itvl, check overlap, if overlap remove the one with the min end value",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8063-adf9-cafed67267b2",
    "title": "Merge Intervals",
    "url": "https://neetcode.io/problems/merge-intervals",
    "tag": "Intervals",
    "hint": "initialize result list with the first interval; and compare all curr interval with the latest in the result",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8028-babe-c11fd030f97e",
    "title": "Insert Interval",
    "url": "https://neetcode.io/problems/insert-new-interval",
    "tag": "Intervals",
    "hint": "see from the perspective of newInterval and decide its position; update the newInterval after merge",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80bf-a681-e51f5d0054c6",
    "title": "Set Matrix Zeroes",
    "url": "https://neetcode.io/problems/set-zeroes-in-matrix",
    "tag": "Math & Geometry",
    "hint": "use inplace to store the indicators for zero rows and cols, iterate twice i.e first to see which to make zero then to update the values",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80b6-aad4-f15b15bcd269",
    "title": "Spiral Matrix",
    "url": "https://neetcode.io/problems/spiral-matrix",
    "tag": "Math & Geometry",
    "hint": "left ,right , top and bottom pointers;  exit condition in the middle",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80d3-a27d-e2cf70b8458c",
    "title": "Pow(x,n)",
    "url": "https://neetcode.io/problems/pow-x-n",
    "tag": "Math & Geometry",
    "hint": "use divide and conquer, handle case for neg, even and odd values of n",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8024-a9cb-cd069e6460b8",
    "title": "Rotate Image",
    "url": "https://neetcode.io/problems/rotate-matrix",
    "tag": "Math & Geometry",
    "hint": "four way swap. go layer by layer",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8033-a869-d65d3a312374",
    "title": "Reverse Integer",
    "url": "https://neetcode.io/problems/reverse-integer",
    "tag": "Bit Manipulation",
    "hint": "use special functions for mod and int division in python; compare the min and max values without the last digit",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8085-bc9b-f20cbbc42805",
    "title": "Desgning Add and Search Words Data Structure",
    "url": "https://neetcode.io/problems/design-word-search-data-structure",
    "tag": "Tries",
    "hint": "similar to simple tries; use dfs when a . is encountered",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80a9-874d-d796613f5f3a",
    "title": "Implement Trie Prefix Tree",
    "url": "https://neetcode.io/problems/implement-prefix-tree",
    "tag": "Tries",
    "hint": "create node class and use hash map for children",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80c9-a7f8-d44f8b60a97d",
    "title": "Word Search ",
    "url": "https://neetcode.io/problems/search-for-word",
    "tag": "Backtracking",
    "hint": "use dfs on every cell and create path",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-806d-9b00-fbcae75f0a17",
    "title": "Combination Sum",
    "url": "https://neetcode.io/problems/combination-target-sum",
    "tag": "Backtracking",
    "hint": "use dfs with choices to inlcude the curr candidate and not include it recursively. ",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8039-92bd-f8faa1eeb05b",
    "title": "Task Scheduler",
    "url": "https://neetcode.io/problems/task-scheduling",
    "tag": "Heap / Priority Queue",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-805b-82d5-e7e7e7aab2de",
    "title": "Kth Largest element in an array",
    "url": "https://neetcode.io/problems/kth-largest-element-in-an-array",
    "tag": "Heap / Priority Queue",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80bd-8343-d840cdaca9bd",
    "title": "K closest points to origin",
    "url": "https://neetcode.io/problems/k-closest-points-to-origin",
    "tag": "Heap / Priority Queue",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-800c-8fab-ffb29b2663c6",
    "title": "Construct binary tree from preorder and inorder traversal",
    "url": "https://neetcode.io/problems/binary-tree-from-preorder-and-inorder-traversal",
    "tag": "Trees",
    "hint": "find root from \u2192 preorder; left & right subtrees \u2192 inorder; use dfs to recursively build the tree using appropriate slicing of the given lists",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80d5-a689-daa94cdf187c",
    "title": "Kth smallest element in a BST",
    "url": "https://neetcode.io/problems/kth-smallest-integer-in-bst",
    "tag": "Trees",
    "hint": "in order traversal ; traverse upto k elems and then return it",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8075-82a2-e802019883ab",
    "title": "Validate Binary Tree Search",
    "url": "https://neetcode.io/problems/valid-binary-search-tree",
    "tag": "Trees",
    "hint": "compare boundaries rather than only the immediate children",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8017-9ae3-f0750702df9a",
    "title": "Binary Tree Right Side View",
    "url": "https://neetcode.io/problems/binary-tree-right-side-view",
    "tag": "Trees",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-807f-89ec-d99556092e9b",
    "title": "Binary Tree Level Order Traversal",
    "url": "https://neetcode.io/problems/level-order-traversal-of-binary-tree",
    "tag": "Trees",
    "hint": "use bfs, store the lvl info as well in the queue",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80e1-ba8c-cad5e50aef27",
    "title": "Lowest Common Ansector of a binary tree",
    "url": "https://neetcode.io/problems/lowest-common-ancestor-in-binary-search-tree",
    "tag": "Trees",
    "hint": "use the property of BST, to find the values and cut the problem into subproblems",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80cc-ac3a-efe1424bbc79",
    "title": "Copy list with random pointer",
    "url": "https://neetcode.io/problems/copy-linked-list-with-random-pointer",
    "tag": "Linked List",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-809b-912d-d71a48e89a29",
    "title": "Remove Nth Node from end of list",
    "url": "https://neetcode.io/problems/remove-node-from-end-of-linked-list",
    "tag": "Linked List",
    "hint": "left and right pointers, create gap(n) between them, shift and then recreate links",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-809a-8292-fce837725bb6",
    "title": "Reorder List",
    "url": "https://neetcode.io/problems/reorder-linked-list",
    "tag": "Linked List",
    "hint": "find mid point (f & s pointers), split, reverse second half, swap",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8004-8ef4-c9e6394c0e3d",
    "title": "Search in Rotated Sorted Array",
    "url": "https://neetcode.io/problems/find-target-in-rotated-sorted-array",
    "tag": "Binary Search",
    "hint": "do binary search to first find the cut and then again to find the target within both the cuts",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8053-a2e0-d29a89c0298a",
    "title": "Find Minimum in Rotated Sorted Array",
    "url": "https://neetcode.io/problems/find-minimum-in-rotated-sorted-array",
    "tag": "Binary Search",
    "hint": "use binary search to find the pivot of the rotation; then return the min elem i.e the first elem in the sorted subarray after the pivot",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80b8-9243-c00f7b32bba5",
    "title": "Koko Eating Banana",
    "url": "https://neetcode.io/problems/eating-bananas",
    "tag": "Binary Search",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-805c-8772-c0aa65209706",
    "title": "Search a 2D Matrix",
    "url": "https://neetcode.io/problems/search-2d-matrix",
    "tag": "Binary Search",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80ab-8f27-cd90bffbedd4",
    "title": "Generate Parenthesis",
    "url": "https://neetcode.io/problems/generate-parentheses",
    "tag": "Stacks",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-805f-a8ac-f86bb6dc0199",
    "title": "Evaluate Reverse Polish Notation",
    "url": "https://neetcode.io/problems/evaluate-reverse-polish-notation",
    "tag": "Stacks",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80af-9e29-ffc0bf631729",
    "title": "Min Stack",
    "url": "https://neetcode.io/problems/minimum-stack",
    "tag": "Stacks",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-800a-8914-d8551571e91d",
    "title": "Permutaion in String",
    "url": "https://neetcode.io/problems/permutation-string",
    "tag": "Sliding Window",
    "hint": "still needs some revision",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8071-8418-d638d374da5b",
    "title": "Longest repeating character replacement",
    "url": "https://neetcode.io/problems/longest-repeating-substring-with-replacement",
    "tag": "Sliding Window",
    "hint": "Dynamic sliding window; extend window if constraint success otherwise shrink window from left",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-80d1-b310-d772cd68042a",
    "title": "Longest substring without repeating characters",
    "url": "https://neetcode.io/problems/longest-substring-without-duplicates",
    "tag": "Sliding Window",
    "hint": "sliding window with two pointers and a set, expanding the right side until a duplicate is found, then shrinking from the left until the duplicate is removed, while tracking the maximum window size.",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8093-a137-c3806196f23f",
    "title": "Container with most water",
    "url": "https://neetcode.io/problems/max-water-container",
    "tag": "Two Pointers",
    "hint": "initialze pointers at start and end, move the pointer having the smaller height",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-80d7-a5f6-e3dbb403f47c",
    "title": "3Sum",
    "url": "https://neetcode.io/problems/three-integer-sum",
    "tag": "Two Pointers",
    "hint": "sort, iterate through and apply 2sum using two pointers; Remember to properly handle duplicates",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": true
  },
  {
    "id": "12cc354f-e725-8083-a5e2-fc0958d027ca",
    "title": "Two Sum || Input Array is sorted",
    "url": "https://neetcode.io/problems/two-integer-sum-ii",
    "tag": "Two Pointers",
    "hint": "",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8053-b6f7-e67577fea832",
    "title": "Longest Consequtive Sequence",
    "url": "https://neetcode.io/problems/longest-consecutive-sequence",
    "tag": "Arrays & Hashing",
    "hint": "hash set; num -1 for seq start;  num + length for calc seq len",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8070-b241-da4bed279782",
    "title": "Valid Sudoku",
    "url": "https://neetcode.io/problems/valid-sudoku",
    "tag": "Arrays & Hashing",
    "hint": "multiple hash sets, use (i//3, j//3) as keys",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8030-b0b3-c965ac471a7e",
    "title": "Product of array excluding self",
    "url": "https://neetcode.io/problems/products-of-array-discluding-self",
    "tag": "Arrays & Hashing",
    "hint": "prefix and postfix computiation, calc prefix in first pass and postfix in second pass then update;  for memory optimization store the prefix in o/p array",
    "level": "Medium ",
    "done": true,
    "must_know": true,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "12cc354f-e725-8015-ac93-e23a0e748568",
    "title": "Encode and Decode Strings",
    "url": "https://neetcode.io/problems/string-encode-and-decode",
    "tag": "Arrays & Hashing",
    "hint": "use the len of each str and also some delimiter like \u2018#\u2019 to separate the len from the actual str i.e ",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8099-8d28-d72e928c02d9",
    "title": "Top K Frequent Elements",
    "url": "https://neetcode.io/problems/top-k-elements-in-list",
    "tag": "Arrays & Hashing",
    "hint": "counter, sort, get k; also can use HEAP",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8010-b215-c7e186f38d04",
    "title": "Anagram Groups",
    "url": "https://neetcode.io/problems/anagram-groups",
    "tag": "Arrays & Hashing",
    "hint": "use default dict of lists, sorted(), result dict key as the sorted tuple",
    "level": "Medium ",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80a1-b65e-e69d3eb8ee5e",
    "title": "Reverse Bits",
    "url": "https://neetcode.io/problems/reverse-bits",
    "tag": "Bit Manipulation",
    "hint": "determine if the ith bit is 0 or 1 then shift it left in appropriate place and bitwise-OR with result",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80a4-ae95-d229ab330657",
    "title": "Counting Bits",
    "url": "https://neetcode.io/problems/counting-bits",
    "tag": "Bit Manipulation",
    "hint": "use DP with the the msb update as offset",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-8046-9692-d61dc208729d",
    "title": "Number of 1 Bits",
    "url": "https://neetcode.io/problems/number-of-one-bits",
    "tag": "Bit Manipulation",
    "hint": "mod with 2 to count 1 then divide by 2 ( or right shift by 1)",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": true,
    "memorize": false
  },
  {
    "id": "10dc354f-e725-80ae-a451-ce8b7a88ee3e",
    "title": "Single Number",
    "url": "https://neetcode.io/problems/single-number",
    "tag": "Bit Manipulation",
    "hint": "x-or all elements, result pop out",
    "level": "Easy",
    "done": true,
    "must_know": false,
    "blind_75": false,
    "memorize": false
  }
]